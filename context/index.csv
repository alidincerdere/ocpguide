Chapter; Name; PageType
1; Advanced Class Design;
1.1; Using Instanceof;
1.2; Understanding Virtual Method Invocation;
1.3; Annotation Overridden Methods;
1.4; Coding equals, hashCode and toString;
1.4.1; toString;
1.4.2; equals;
1.4.3; hashCode;
1.5; Working with Enums;
1.5.1; Using Enums in Switch Statements;
1.5.2; Adding Constructors, Fields, and Methods;
1.6; Creating Nested Classes;
1.6.1; Member Inner Classes;
1.6.2; Local Inner Classes;
1.6.3; Anonymous Inner Classes;
1.6.4; Static Nested Classes;
1.7; Summary;
1.8; Exam Essentials;
1.9; Review Questions; EXAM
2; Design Patterns and Principles;
2.1; Designing an Interface;
2.1.1; Purpose of an Interface;
2.2; Introducing Functional Programming;
2.2.1; Defining a Functional Interface;
2.2.2; Implementing Functional Interfaces with Lambdas;
2.2.3; Applying the Predicate Interface;
2.3; Implementing Polymorphism;
2.3.1; Distinguishing between an Object and a Reference;
2.3.2; Casting Object References;
2.4; Understanding Design Principles;
2.4.1; Encapsulating Data;
2.4.2; Creating JavaBeans;
2.4.3; Applying the Is-a Relationship;
2.4.4; Applying the Has-a Relationship;
2.4.5; Composing Objects;
2.5; Working with Design Patterns;
2.5.1; Applying the Singleton Pattern;
2.5.2; Creating Immutable Objects;
2.5.3; Using the Builder Pattern;
2.5.4; Creating Objects with the Factory Pattern;
2.6; Summary;
2.7; Exam Essentials;
2.8; Review Questions; EXAM
3; Generics and Collections;
3.1; Reviewing OCA Collections;
3.1.1; Array and Array List;
3.1.2; Searching and Sorting;
3.1.3; Wrapper Classes and Autoboxing;
3.1.4; The Diamond Operator;
3.2; Working with Generics;
3.2.1; Generic Classes;
3.2.2; Generic Interfaces;
3.2.3; Generic Methods;
3.2.4; Interacting with Legacy Code;
3.2.5; Bounds;
3.2.6; Putting It All Together;
3.3; Using Lists, Sets, Maps and Queues;
3.3.1; Common Collection Methods;
3.3.2; Using the List Interface;
3.3.3; Using the Set Interface;
3.3.4; Using the Queue Interface;
3.3.5; Map;
3.3.6; Comparing Collection Types;
3.4; Comparator vs. Comparable;
3.4.1; Comparable;
3.4.2; Comparator;
3.5; Searching and Sorting;
3.6; Additions in Java 8;
3.6.1; Using Method References;
3.6.2; Removing Conditionally;
3.6.3; Updating All Elements;
3.6.4; Looping through a Collection;
3.6.5; Using New Java 8 Map APIs;
3.7; Summary;
3.8; Exam Essentials;
3.9; Review Questions; EXAM
4; Functional Programming;
4.1; Using Variables in Lambdas;
4.2; Working with Built-in Functional Interfaces;
4.2.1; Implementing Supplier;
4.2.2; Implementing Consumer and BiConsumer;
4.2.3; Implementing Function and BiFunction;
4.2.4; Implementing UnaryOperator and BinaryOperator;
4.2.5; Checking Functional Interfaces;
4.3; Running an Optional;
4.4; Using Streams;
4.4.1; Creating Stream Sources;
4.4.2; Using Common Terminal Operations;
4.4.3; Using Common Intermediate Operations;
4.4.4; Putting Together the Pipeline;
4.4.5; Printing a Stream;
4.5; Working with Primitives;
4.5.1; Creating Primitive Streams;
4.5.2; Using Optional with Primitive Streams;
4.5.3; Summarizing Statistics;
4.5.4; Learning the Functional Interfaces for Primitives;
4.6; Working with Advanced Stream Pipeline Concepts;
4.6.1; Linking Streams to the Underlying Data;
4.6.2; Chaining Optionals;
4.6.3; Collecting Results;
4.7; Summary;
4.8; Exam Essentials;
4.9; Review Questions; EXAM
7; Concurrency;
7.1; Introducing Threads;
7.1.1; Distinguishing Thread Types;
7.1.2; Understanding Thread Concurrency;
7.1.3; Introducing Runnable;
7.1.4; Creating a Thread;
7.1.5; Polling with Sleep;
7.2; Creating Threads with the Executor Service;
7.2.1; Introducing the Single-Thread Executor;
7.2.2; Shutting down a Thread Executor;
7.2.3; Submitting Tasks;
7.2.4; Waiting for Results;
7.2.5; Scheduling Tasks;
7.2.6; Increasing Concurrency with Pools;
7.3; Synchronizing Data Access;
7.3.1; Protecting Data with Atomic Classes;
7.3.2; Improving Access with Synchronized Blocks;
7.3.3; Synchronizing Methods;
7.3.4; Understanding the Cost of Synchronization;
7.4; Using Concurrent Collections;
7.4.1; Introducing Concurrent Collections;
7.4.2; Understanding Memory Consistency Errors;
7.4.3; Working with Concurrent Classes;
7.4.4; Obtaining Synchronized Collections;
7.5; Working with Parallel Streams;
7.5.1; Creating Parallel Streams;
7.5.2; Processing Tasks in Parallel;
7.5.3; Processing Parallel Reductions;
7.6; Managing Concurrent Processes;
7.6.1; Creating a CyclicBarrier;
7.6.2; Applying the Fork-Join Framework;
7.7; Identifying Threading Problems;
7.7.1; Understanding Liveness;
7.7.2; Managing Race Conditions;
7.8; Summary;
7.9; Exam Essentials;
7.10; Review Questions; EXAM;





