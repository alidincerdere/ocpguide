<Lecture>
    <Description>
        When two threads try to modify the same non-concurrent collection, the JVM may throw a ConcurrentModificationException at runtime. In fact, it can happen with a single thread.
    </Description><CodeSnipped>
import java.util.*;

public class ZooManager {

    public static void main(String[] args) {

        Map&lt;String, Object> foodData = new HashMap&lt;String, Object>();
        foodData.put("penguin", 1);
        foodData.put("flamingo", 2);

        for(String key: foodData.keySet()) {
            System.out.println(key);
            foodData.remove(key);
        }
    }
}
</CodeSnipped>
    <Description>
    This one is better.
    </Description> <CodeSnipped>

import java.util.*;
import java.util.concurrent.*;

public class ZooManager {

    public static void main(String[] args) {

        Map&lt;String, Object> foodData = new ConcurrentHashMap&lt;String, Object>();
        foodData.put("penguin", 1);
        foodData.put("flamingo", 2);

        for(String key: foodData.keySet()) {
            System.out.println(key);
            foodData.remove(key);
        }
    }
}

</CodeSnipped>

</Lecture>

