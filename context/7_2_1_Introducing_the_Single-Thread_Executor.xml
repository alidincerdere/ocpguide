<Lecture>
   <CodeSnipped>
import java.util.concurrent.*;

public class ZooInfo {

   public static void main(String[] args) {

       ExecutorService service = null;
       try {
          service = Executors.newSingleThreadExecutor();
          System.out.println("begin");

          service.execute(() -> System.out.println("Printing zoo inventory"));

          service.execute(() -> {for(int i=0; i&lt;3; i++)
                 System.out.println("Printing record: "+i);} );

          service.execute(() -> System.out.println("Printing zoo inventory"));
          System.out.println("end");

       } finally {

          if(service != null) service.shutdown();
       }
   }

}
</CodeSnipped>
    <Description>
        With a single-thread executor, results are guaranteed to be executed in the order in which they are added to the executor service.
        Note that in above example main thread is still different than the single thread we get from executor service
    </Description>
</Lecture>

