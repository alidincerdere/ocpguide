<Lecture>
    <Description>
        Besides the concurrent collection classes that we have covered, the Concurrency API also includes methods for obtaining synchronized versions of existing non-concurrent collection objects.

        SynchronizedCollection,
        SynchronizedList
        ...

        When should you use these methods? If you know at the time of creation that your object requires synchronization, then you should use one of the concurrent collection classes. On the other hand, if you are given an existing collection that is not a concurrent class and need to access it among multiple threads, you can wrap it using the methods in Table 7.12.

        But still we have to use synchronized keyword:
    </Description><CodeSnipped>
import java.util.*;
import java.util.concurrent.*;

public class SyncColl {

    public static void main (String[] args) {

        List&lt;Integer> list = Collections.synchronizedList( new ArrayList&lt;>(Arrays.asList(4,3,52)));
        synchronized(list) {
            for(int data: list)
                System.out.print(data+" ");
        }
    }
}
</CodeSnipped>
    <Description>
        Unlike the concurrent collections, the synchronized collections also throw an exception if they are modified within an iterator by a single thread
    </Description><CodeSnipped>

import java.util.*;
import java.util.concurrent.*;

public class ZooManager {

    public static void main(String[] args) {

        Map&lt;String, Object> foodData = new HashMap&lt;String, Object>();
        foodData.put("penguin", 1);
        foodData.put("flamingo", 2);


        Map&lt;String, Object> synchronizedFoodData = Collections.synchronizedMap(foodData);

        for(String key: synchronizedFoodData.keySet()) {
            System.out.println(key);
            synchronizedFoodData.remove(key);
        }
    }
}
</CodeSnipped>
</Lecture>

